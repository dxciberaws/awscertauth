{
  "Description" : "(0.0.3) SSM Backed Certificate Authority. Based on https://github.com/ikreymer/certauth",
  "Mappings" : {
    "Constants": {
      "ProjectName": {"Value":"SSM-CA","LowCaseValue":"ssm-ca"},
      "Version": {"Value":"0-0-3"}
    }
  },
  "Parameters" : {
    "TemplatesS3Url":{
      "Type" : "String"
    },
    "ParametersPrefix": {
      "Type": "String"
    }
  },
  "Resources" : {
    "SsmAutomationRole": {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "Path" : {"Fn::Join":["",["/",{"Fn::FindInMap": ["Constants","ProjectName","LowCaseValue"]},"/"]]},
        "AssumeRolePolicyDocument" : {
          "Version": "2008-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                   "ssm.amazonaws.com",
                   "ec2.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "ManagedPolicyArns" : ["arn:aws:iam::aws:policy/ReadOnlyAccess"],
        "Policies" : [
          {
            "PolicyName":"ScriptPrivileges",
            "PolicyDocument": {
              "Version":"2012-10-17",
              "Statement": [
                {
                  "Sid":"KmsKey",
                  "Effect":"Allow",
                  "Action": [
                    "kms:*"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Sid":"S3Management",
                  "Effect":"Allow",
                  "Action": [
                    "s3:*"
                  ],
                  "Resource":"*"
                },
                {
                  "Sid":"SsmManagement",
                  "Effect":"Allow",
                  "Action": [
                    "ssm:*"
                  ],
                  "Resource":"*"
                },
                {
                  "Sid":"AcmManagement",
                  "Effect":"Allow",
                  "Action": [
                    "acm:*"
                  ],
                  "Resource":"*"
                },
                {
                  "Sid":"SecretsManager",
                  "Effect":"Allow",
                  "Action":[
                    "secretsmanager:*"
                  ],
                  "Resource":"*"
                }
              ]
            }
          }
        ],
        "Tags" : [
           {"Key":"lz:cfnstack:name","Value" : {"Ref":"AWS::StackName"}},
           {"Key":"lz:cfnstack:region","Value" : {"Ref":"AWS::Region"}},
           {"Key":"lz:project","Value" : {"Fn::FindInMap": ["Constants","ProjectName","Value"]}}
        ]
      }
    },
    "CreateCertificateAuthority": {
      "Type" : "AWS::SSM::Document",
      "Properties" : {
        "DocumentType" : "Automation",
        "Attachments":[
           {
            "Key":"S3FileUrl",
            "Name":"@ARTIFACT@",
            "Values":[{"Fn::Sub":"${TemplatesS3Url}/@ARTIFACT@"}]
           }
        ],
        "Tags" : [
           {"Key":"lz:project","Value" : {"Fn::FindInMap": ["Constants","ProjectName","Value"]}},
           {"Key":"lz:automation:operation","Value" : "Backup"}
        ],
        "Content" : {
          "schemaVersion":"0.3",
          "description": "Creates a Certificate Authority",
          "assumeRole": {"Fn::GetAtt":"SsmAutomationRole.Arn"},
          "parameters": {
            "CaName": {
              "type":"String",
              "allowedPattern":"[0-9,a-z,A-Z]{3,24}"
            },
            "CommonName": {
              "type": "String"
            },
            "ParametersPrefix": {
              "type": "String",
              "default": {"Fn::Sub":"${ParametersPrefix}"}
            },
            "Overwrite": {
              "type": "String",
              "default": "false",
              "allowedValues": ["true","false"]
            }
          },
          "files":{
            "@ARTIFACT@": {
              "checksums":{
                "sha256":"@SHA256@"
              }
            }
          },
          "mainSteps": [
            {
              "name": "CheckIfCaExists",
              "action":"aws:executeScript",
              "onFailure":"Abort",
              "inputs": {
                "Runtime": "python3.8",
                "Handler": "handler",
                "InputPayload": {
                  "prefix":"{{ParametersPrefix}}",
                  "CaName":"{{CaName}}",
                  "CommonName":"{{CommonName}}",
                  "Overwrite":"{{Overwrite}}"
                },
                "Script": {"Fn::Join":["",[
                  "import boto3\n",
                  "def handler(events,context):\n",
                  "  prefix=events['prefix']\n",
                  "  prefix= prefix if prefix.endswith('/') else f'{prefix}/'\n",
                  "  ca_name=events['CaName']\n",
                  "  common_name=events['CommonName']\n",
                  "  overwrite=(events['Overwrite'].lower()=='true')\n",
                  "  ssm=boto3.client('ssm')\n",
                  "  result = ssm.get_parameters_by_path(Path=f'{prefix}{ca_name}/',Recursive=True,WithDecryption=True)\n",
                  "  if len(result['Parameters']) > 0:\n",
                  "    exists = True\n",
                  "    if not overwrite:\n",
                  "      raise Exception(f'Certificate Authority {prefix}{ca_name} already exists. Set Overwrite to true to overwrite')\n",
                  "  else:\n",
                  "    exists = False\n",
                  "  args = f'{prefix}{ca_name} -c \"{common_name}\" -s ' + ('-f' if (exists and overwrite) else '')\n",
                  "  return {'Args': args}\n"
                ]]}
              },
              "outputs": [
                {
                  "Name":"Args",
                  "Selector":"$.Payload.Args",
                  "Type":"String"
                }
              ]
            },
            {
              "name": "CreateCertificateAuthority",
              "action":"aws:executeScript",
              "onFailure":"Abort",
              "inputs": {
                "Runtime": "python3.7",
                "Handler": "certauth.handler",
                "InputPayload": {
                  "args":"{{CheckIfCaExists.Args}}"
                },
                "Attachment":"@ARTIFACT@"
              }
            }
          ]
        }
      }
    },
    "ServerCertificate": {
      "Type" : "AWS::SSM::Document",
      "Properties" : {
        "DocumentType" : "Automation",
        "Attachments":[
           {
            "Name":"@ARTIFACT@",
            "Key":"S3FileUrl",
            "Values":[{"Fn::Sub":"${TemplatesS3Url}/@ARTIFACT@"}]
           }
        ],
        "Tags" : [
           {"Key":"lz:project","Value" : {"Fn::FindInMap": ["Constants","ProjectName","Value"]}},
           {"Key":"lz:automation:operation","Value" : "SSM-CA.NewServerCertificate"}
        ],
        "Content" : {
          "schemaVersion":"0.3",
          "description": "Creates a new Server Certificate",
          "assumeRole": {"Fn::GetAtt":"SsmAutomationRole.Arn"},
          "parameters": {
            "CaName": {
              "type":"String"
            },
            "CommonName": {
              "type": "String"
            },
            "IPs": {
              "type": "String",
              "default": "NONE"
            },
            "FQDNs": {
              "type": "String",
              "default": "NONE"
            },
            "Wildcard": {
              "type": "String",
              "allowedValues":["true","false"],
              "default":"false"
            },
            "ParametersPrefix": {
              "type": "String",
              "default": {"Fn::Sub":"${ParametersPrefix}"}
            },
            "Overwrite": {
              "type": "String",
              "default": "false",
              "allowedValues": ["true","false"]
            }
          },
          "files":{
            "@ARTIFACT@": {
              "checksums":{
                "sha256":"@SHA256@"
              }
            }
          },
          "mainSteps": [
            {
              "name": "CheckIfCaExists",
              "action":"aws:executeScript",
              "onFailure":"Abort",
              "inputs": {
                "Runtime": "python3.8",
                "Handler": "handler",
                "InputPayload": {
                  "prefix":"{{ParametersPrefix}}",
                  "CaName":"{{CaName}}",
                  "CommonName":"{{CommonName}}",
                  "Overwrite":"{{Overwrite}}",
                  "IPs":"{{IPs}}",
                  "FQDNs":"{{FQDNs}}",
                  "Wildcard":"{{Wildcard}}"
                },
                "Script": {"Fn::Join":["",[
                  "import boto3\n",
                  "def handler(events,context):\n",
                  "  prefix=events['prefix']\n",
                  "  prefix= prefix if prefix.endswith('/') else f'{prefix}/'\n",
                  "  ca_name=events['CaName']\n",
                  "  common_name=events['CommonName']\n",
                  "  overwrite=(events['Overwrite'].lower()=='true')\n",
                  "  ssm=boto3.client('ssm')\n",
                  "  result = ssm.get_parameters_by_path(Path=f'{prefix}{ca_name}/',Recursive=True,WithDecryption=True)\n",
                  "  if not len(result['Parameters']) > 0:\n",
                  "    exists = False\n",
                  "    raise Exception(f'Certificate Authority {prefix}{ca_name} does not exist.')\n",
                  "  else:\n",
                  "    exists = True\n",
                  "  fqdns = events['FQDNs'].strip()\n",
                  "  fqdns = f'--cert_fqdns \"{fqdns}\"' if fqdns!='NONE' else ''\n",
                  "  ips = events['IPs'].strip()\n",
                  "  ips = f'--cert_ips \"{ips}\"' if ips!='NONE' else ''\n",
                  "  wildcard = '--wildcard_cert' if events['Wildcard'].lower() == 'true' else ''\n",
                  "  args = f'{prefix}{ca_name} -s -n {common_name}'+ f' {fqdns} {ips} {wildcard} ' + ('-f' if (overwrite and exists) else '')\n",
                  "  return {'Args': args}\n"
                ]]}
              },
              "outputs": [
                {
                  "Name":"Args",
                  "Selector":"$.Payload.Args",
                  "Type":"String"
                }
              ]
            },
            {
              "name": "CreateCertificate",
              "action":"aws:executeScript",
              "onFailure":"Abort",
              "inputs": {
                "Runtime": "python3.7",
                "Handler": "certauth.handler",
                "InputPayload": {
                  "args":"{{CheckIfCaExists.Args}}"
                },
                "Attachment":"@ARTIFACT@"
              }
            }
          ]
        }
      }
    },
    "ClientCertificate": {
      "Type" : "AWS::SSM::Document",
      "Properties" : {
        "DocumentType" : "Automation",
        "Attachments":[
           {
            "Name":"@ARTIFACT@",
            "Key":"S3FileUrl",
            "Values":[{"Fn::Sub":"${TemplatesS3Url}/@ARTIFACT@"}]
           }
        ],
        "Tags" : [
           {"Key":"lz:project","Value" : {"Fn::FindInMap": ["Constants","ProjectName","Value"]}},
           {"Key":"lz:automation:operation","Value" : "SSM-CA.NewServerCertificate"}
        ],
        "Content" : {
          "schemaVersion":"0.3",
          "description": "Creates a new Server Certificate",
          "assumeRole": {"Fn::GetAtt":"SsmAutomationRole.Arn"},
          "parameters": {
            "CaName": {
              "type":"String"
            },
            "CommonName": {
              "type": "String"
            },
            "ParametersPrefix": {
              "type": "String",
              "default": {"Fn::Sub":"${ParametersPrefix}"}
            },
            "Overwrite": {
              "type": "String",
              "default": "false",
              "allowedValues": ["true","false"]
            }
          },
          "files":{
            "@ARTIFACT@": {
              "checksums":{
                "sha256":"@SHA256@"
              }
            }
          },
          "mainSteps": [
            {
              "name": "CheckIfCaExists",
              "action":"aws:executeScript",
              "onFailure":"Abort",
              "inputs": {
                "Runtime": "python3.8",
                "Handler": "handler",
                "InputPayload": {
                  "prefix":"{{ParametersPrefix}}",
                  "CaName":"{{CaName}}",
                  "CommonName":"{{CommonName}}",
                  "Overwrite":"{{Overwrite}}"
                },
                "Script": {"Fn::Join":["",[
                  "import boto3\n",
                  "def handler(events,context):\n",
                  "  prefix=events['prefix']\n",
                  "  prefix= prefix if prefix.endswith('/') else f'{prefix}/'\n",
                  "  ca_name=events['CaName']\n",
                  "  common_name=events['CommonName']\n",
                  "  overwrite=(events['Overwrite'].lower()=='true')\n",
                  "  ssm=boto3.client('ssm')\n",
                  "  result = ssm.get_parameters_by_path(Path=f'{prefix}{ca_name}/',Recursive=True,WithDecryption=True)\n",
                  "  if not len(result['Parameters']) > 0:\n",
                  "    exists = False\n",
                  "    raise Exception(f'Certificate Authority {prefix}{ca_name} does not exist.')\n",
                  "  else:\n",
                  "    exists = True\n",
                  "  args = f'{prefix}{ca_name} -s -l \"{common_name}\"'+ ('-f' if (overwrite and exists) else '')\n",
                  "  return {'Args': args}\n"
                ]]}
              },
              "outputs": [
                {
                  "Name":"Args",
                  "Selector":"$.Payload.Args",
                  "Type":"String"
                }
              ]
            },
            {
              "name": "CreateCertificate",
              "action":"aws:executeScript",
              "onFailure":"Abort",
              "inputs": {
                "Runtime": "python3.7",
                "Handler": "certauth.handler",
                "InputPayload": {
                  "args":"{{CheckIfCaExists.Args}}"
                },
                "Attachment":"@ARTIFACT@"
              }
            }
          ]
        }
      }
    },
    "RevokeCertificate": {
      "Type" : "AWS::SSM::Document",
      "Properties" : {
        "DocumentType" : "Automation",
        "Attachments":[
           {
            "Name":"@ARTIFACT@",
            "Key":"S3FileUrl",
            "Values":[{"Fn::Sub":"${TemplatesS3Url}/@ARTIFACT@"}]
           }
        ],
        "Tags" : [
           {"Key":"lz:project","Value" : {"Fn::FindInMap": ["Constants","ProjectName","Value"]}},
           {"Key":"lz:automation:operation","Value" : "SSM-CA.NewServerCertificate"}
        ],
        "Content" : {
          "schemaVersion":"0.3",
          "description": "Revokes a Certificate. CRL must be updated after",
          "assumeRole": {"Fn::GetAtt":"SsmAutomationRole.Arn"},
          "parameters": {
            "CaName": {
              "type":"String"
            },
            "CommonName": {
              "type": "String"
            },
            "ParametersPrefix": {
              "type": "String",
              "default": {"Fn::Sub":"${ParametersPrefix}"}
            }
          },
          "files":{
            "@ARTIFACT@": {
              "checksums":{
                "sha256":"@SHA256@"
              }
            }
          },
          "mainSteps": [
            {
              "name": "CheckIfCaExists",
              "action":"aws:executeScript",
              "onFailure":"Abort",
              "inputs": {
                "Runtime": "python3.8",
                "Handler": "handler",
                "InputPayload": {
                  "prefix":"{{ParametersPrefix}}",
                  "CaName":"{{CaName}}",
                  "CommonName":"{{CommonName}}"
                },
                "Script": {"Fn::Join":["",[
                  "import boto3\n",
                  "def handler(events,context):\n",
                  "  prefix=events['prefix']\n",
                  "  prefix= prefix if prefix.endswith('/') else f'{prefix}/'\n",
                  "  ca_name=events['CaName']\n",
                  "  common_name=events['CommonName']\n",
                  "  ssm=boto3.client('ssm')\n",
                  "  result = ssm.get_parameters_by_path(Path=f'{prefix}{ca_name}/',Recursive=True,WithDecryption=True)\n",
                  "  if not len(result['Parameters']) > 0:\n",
                  "    exists = False\n",
                  "    raise Exception(f'Certificate Authority {prefix}{ca_name} does not exist.')\n",
                  "  else:\n",
                  "    exists = True\n",
                  "  args = f'{prefix}{ca_name} -s -l \"{common_name}\" -r'\n",
                  "  return {'Args': args}\n"
                ]]}
              },
              "outputs": [
                {
                  "Name":"Args",
                  "Selector":"$.Payload.Args",
                  "Type":"String"
                }
              ]
            },
            {
              "name": "RevokeCertificate",
              "action":"aws:executeScript",
              "onFailure":"Abort",
              "inputs": {
                "Runtime": "python3.7",
                "Handler": "certauth.handler",
                "InputPayload": {
                  "args":"{{CheckIfCaExists.Args}}"
                },
                "Attachment":"@ARTIFACT@"
              }
            }
          ]
        }
      }
    },
    "GenerateCrl": {
      "Type" : "AWS::SSM::Document",
      "Properties" : {
        "DocumentType" : "Automation",
        "Attachments":[
           {
            "Name":"@ARTIFACT@",
            "Key":"S3FileUrl",
            "Values":[{"Fn::Sub":"${TemplatesS3Url}/@ARTIFACT@"}]
           }
        ],
        "Tags" : [
           {"Key":"lz:project","Value" : {"Fn::FindInMap": ["Constants","ProjectName","Value"]}},
           {"Key":"lz:automation:operation","Value" : "SSM-CA.NewServerCertificate"}
        ],
        "Content" : {
          "schemaVersion":"0.3",
          "description": "Revokes a Certificate. CRL must be updated after",
          "assumeRole": {"Fn::GetAtt":"SsmAutomationRole.Arn"},
          "parameters": {
            "CaName": {
              "type":"String"
            },
            "S3Uri": {
              "type": "String"
            },
            "ParametersPrefix": {
              "type": "String",
              "default": {"Fn::Sub":"${ParametersPrefix}"}
            }
          },
          "files":{
            "@ARTIFACT@": {
              "checksums":{
                "sha256":"@SHA256@"
              }
            }
          },
          "mainSteps": [
            {
              "name": "CheckIfCaExists",
              "action":"aws:executeScript",
              "onFailure":"Abort",
              "inputs": {
                "Runtime": "python3.8",
                "Handler": "handler",
                "InputPayload": {
                  "prefix":"{{ParametersPrefix}}",
                  "CaName":"{{CaName}}",
                  "S3Uri":"{{S3Uri}}"
                },
                "Script": {"Fn::Join":["",[
                  "import boto3\n",
                  "def handler(events,context):\n",
                  "  prefix=events['prefix']\n",
                  "  prefix= prefix if prefix.endswith('/') else f'{prefix}/'\n",
                  "  ca_name=events['CaName']\n",
                  "  s3_uri=events['S3Uri']\n",
                  "  ssm=boto3.client('ssm')\n",
                  "  result = ssm.get_parameters_by_path(Path=f'{prefix}{ca_name}/',Recursive=True,WithDecryption=True)\n",
                  "  if not len(result['Parameters']) > 0:\n",
                  "    exists = False\n",
                  "    raise Exception(f'Certificate Authority {prefix}{ca_name} does not exist.')\n",
                  "  else:\n",
                  "    exists = True\n",
                  "  args = f'{prefix}{ca_name} -s -R \"{s3_uri}\"'\n",
                  "  return {'Args': args}\n"
                ]]}
              },
              "outputs": [
                {
                  "Name":"Args",
                  "Selector":"$.Payload.Args",
                  "Type":"String"
                }
              ]
            },
            {
              "name": "GenerateCRL",
              "action":"aws:executeScript",
              "onFailure":"Abort",
              "inputs": {
                "Runtime": "python3.7",
                "Handler": "certauth.handler",
                "InputPayload": {
                  "args":"{{CheckIfCaExists.Args}}"
                },
                "Attachment":"@ARTIFACT@"
              }
            }
          ]
        }
      }
    },
    "AcmImportCertificate": {
      "Type" : "AWS::SSM::Document",
      "Properties" : {
        "DocumentType" : "Automation",
        "Attachments":[
           {
            "Name":"@ARTIFACT@",
            "Key":"S3FileUrl",
            "Values":[{"Fn::Sub":"${TemplatesS3Url}/@ARTIFACT@"}]
           }
        ],
        "Tags" : [
           {"Key":"lz:project","Value" : {"Fn::FindInMap": ["Constants","ProjectName","Value"]}},
           {"Key":"lz:automation:operation","Value" : "SSM-CA.NewServerCertificate"}
        ],
        "Content" : {
          "schemaVersion":"0.3",
          "description": "Imports an existing certificate in AWS ACM",
          "assumeRole": {"Fn::GetAtt":"SsmAutomationRole.Arn"},
          "parameters": {
            "CaName": {
              "type":"String"
            },
            "CommonName": {
              "type": "String"
            },
            "ParametersPrefix": {
              "type": "String",
              "default": {"Fn::Sub":"${ParametersPrefix}"}
            }
          },
          "files":{
            "@ARTIFACT@": {
              "checksums":{
                "sha256":"@SHA256@"
              }
            }
          },
          "mainSteps": [
            {
              "name": "CheckIfCaExists",
              "action":"aws:executeScript",
              "onFailure":"Abort",
              "inputs": {
                "Runtime": "python3.8",
                "Handler": "handler",
                "InputPayload": {
                  "prefix":"{{ParametersPrefix}}",
                  "CaName":"{{CaName}}",
                  "CommonName":"{{CommonName}}"
                },
                "Script": {"Fn::Join":["",[
                  "import boto3\n",
                  "def handler(events,context):\n",
                  "  prefix=events['prefix']\n",
                  "  prefix= prefix if prefix.endswith('/') else f'{prefix}/'\n",
                  "  ca_name=events['CaName']\n",
                  "  common_name=events['CommonName']\n",
                  "  ssm=boto3.client('ssm')\n",
                  "  result = ssm.get_parameters_by_path(Path=f'{prefix}{ca_name}/',Recursive=True,WithDecryption=True)\n",
                  "  if not len(result['Parameters']) > 0:\n",
                  "    exists = False\n",
                  "    raise Exception(f'Certificate Authority {prefix}{ca_name} does not exist.')\n",
                  "  else:\n",
                  "    exists = True\n",
                  "  args = f'{prefix}{ca_name} -s -l \"{common_name}\" -A'\n",
                  "  return {'Args': args}\n"
                ]]}
              },
              "outputs": [
                {
                  "Name":"Args",
                  "Selector":"$.Payload.Args",
                  "Type":"String"
                }
              ]
            },
            {
              "name": "ImportCertificate",
              "action":"aws:executeScript",
              "onFailure":"Abort",
              "inputs": {
                "Runtime": "python3.7",
                "Handler": "certauth.handler",
                "InputPayload": {
                  "args":"{{CheckIfCaExists.Args}}"
                },
                "Attachment":"@ARTIFACT@"
              }
            }
          ]
        }
      }
    }
  }
}